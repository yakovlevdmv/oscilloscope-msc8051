;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 27.02.2018 11:36:50
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x020123  	LJMP 291
0x0003	0x020000  	LJMP 0
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020000  	LJMP 0
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
0x0026	0x00      	NOP
0x0027	0x00      	NOP
0x0028	0x00      	NOP
0x0029	0x00      	NOP
0x002A	0x00      	NOP
0x002B	0x020000  	LJMP 0
_writeSPI:
;ADC.c,209 :: 		void writeSPI(int _data) {
;ADC.c,210 :: 		SPDR = _data;
0x002E	0x851686  	MOV SPDR, FARG_writeSPI__data+0
;ADC.c,211 :: 		}
0x0031	0x22      	RET
; end of _writeSPI
_readSPI:
;ADC.c,216 :: 		int readSPI() {
;ADC.c,218 :: 		_data = SPDR;
0x0032	0x858616  	MOV readSPI__data_L0, SPDR+0
0x0035	0xE4      	CLR A
0x0036	0xF517    	MOV readSPI__data_L0+1, A
;ADC.c,219 :: 		return _data;
0x0038	0xA816    	MOV R0, readSPI__data_L0
0x003A	0xA917    	MOV R1, readSPI__data_L0+1
;ADC.c,220 :: 		}
0x003C	0x22      	RET
; end of _readSPI
_adc_get_data:
;ADC.c,232 :: 		struct rcv_data adc_get_data(int channel) {
0x003D	0x850312  	MOV _adc_get_data_su_addr, 3
;ADC.c,234 :: 		int SPI_init_data = 0b11000000;
0x0040	0x7510C0  	MOV adc_get_data_SPI_init_data_L0, #192
0x0043	0x751100  	MOV adc_get_data_SPI_init_data_L0+1, #0
;ADC.c,235 :: 		if(channel == 0) {
0x0046	0xE50E    	MOV A, FARG_adc_get_data_channel
0x0048	0x450F    	ORL A, FARG_adc_get_data_channel+1
0x004A	0x7002    	JNZ L_adc_get_data10
;ADC.c,236 :: 		SPI_init_data += 0b00000000;
;ADC.c,237 :: 		} else if(channel == 1) {
0x004C	0x804C    	SJMP L_adc_get_data11
L_adc_get_data10:
0x004E	0x7401    	MOV A, #1
0x0050	0x650E    	XRL A, FARG_adc_get_data_channel
0x0052	0x7004    	JNZ L__adc_get_data39
0x0054	0x7400    	MOV A, #0
0x0056	0x650F    	XRL A, FARG_adc_get_data_channel+1
L__adc_get_data39:
0x0058	0x700E    	JNZ L_adc_get_data12
;ADC.c,238 :: 		SPI_init_data += 0b00010000;
0x005A	0x7410    	MOV A, #16
0x005C	0x2510    	ADD A, adc_get_data_SPI_init_data_L0
0x005E	0xF510    	MOV adc_get_data_SPI_init_data_L0, A
0x0060	0x7400    	MOV A, #0
0x0062	0x3511    	ADDC A, adc_get_data_SPI_init_data_L0+1
0x0064	0xF511    	MOV adc_get_data_SPI_init_data_L0+1, A
;ADC.c,239 :: 		} else if(channel == 2) {
0x0066	0x8032    	SJMP L_adc_get_data13
L_adc_get_data12:
0x0068	0x7402    	MOV A, #2
0x006A	0x650E    	XRL A, FARG_adc_get_data_channel
0x006C	0x7004    	JNZ L__adc_get_data40
0x006E	0x7400    	MOV A, #0
0x0070	0x650F    	XRL A, FARG_adc_get_data_channel+1
L__adc_get_data40:
0x0072	0x700E    	JNZ L_adc_get_data14
;ADC.c,240 :: 		SPI_init_data += 0b00100000;
0x0074	0x7420    	MOV A, #32
0x0076	0x2510    	ADD A, adc_get_data_SPI_init_data_L0
0x0078	0xF510    	MOV adc_get_data_SPI_init_data_L0, A
0x007A	0x7400    	MOV A, #0
0x007C	0x3511    	ADDC A, adc_get_data_SPI_init_data_L0+1
0x007E	0xF511    	MOV adc_get_data_SPI_init_data_L0+1, A
;ADC.c,241 :: 		} else if(channel == 3) {
0x0080	0x8018    	SJMP L_adc_get_data15
L_adc_get_data14:
0x0082	0x7403    	MOV A, #3
0x0084	0x650E    	XRL A, FARG_adc_get_data_channel
0x0086	0x7004    	JNZ L__adc_get_data41
0x0088	0x7400    	MOV A, #0
0x008A	0x650F    	XRL A, FARG_adc_get_data_channel+1
L__adc_get_data41:
0x008C	0x700C    	JNZ L_adc_get_data16
;ADC.c,242 :: 		SPI_init_data += 0b00110000;
0x008E	0x7430    	MOV A, #48
0x0090	0x2510    	ADD A, adc_get_data_SPI_init_data_L0
0x0092	0xF510    	MOV adc_get_data_SPI_init_data_L0, A
0x0094	0x7400    	MOV A, #0
0x0096	0x3511    	ADDC A, adc_get_data_SPI_init_data_L0+1
0x0098	0xF511    	MOV adc_get_data_SPI_init_data_L0+1, A
;ADC.c,243 :: 		}
L_adc_get_data16:
L_adc_get_data15:
L_adc_get_data13:
L_adc_get_data11:
;ADC.c,244 :: 		CS = 0; //Включение АЦП
0x009A	0xC2A0    	CLR P2_0_bit
;ADC.c,249 :: 		writeSPI(SPI_init_data);       //Отправка данных для установки режима АЦП
0x009C	0x851016  	MOV FARG_writeSPI__data, adc_get_data_SPI_init_data_L0+0
0x009F	0x851117  	MOV FARG_writeSPI__data+1, adc_get_data_SPI_init_data_L0+1
0x00A2	0x112E    	ACALL _writeSPI
;ADC.c,250 :: 		while(SPIF_bit != 1) {}     //Ждем конца отправки
L_adc_get_data17:
0x00A4	0xE5AA    	MOV A, SPIF_bit
0x00A6	0x20E702  	JB ACC.B7, L_adc_get_data18
0x00A9	0x80F9    	SJMP L_adc_get_data17
L_adc_get_data18:
;ADC.c,251 :: 		_data.first = readSPI(); //Читаем результат
0x00AB	0x1132    	ACALL _readSPI
0x00AD	0x850013  	MOV adc_get_data__data_L0, 0
;ADC.c,254 :: 		writeSPI(0b00000000); //Отправка данных
0x00B0	0x751600  	MOV FARG_writeSPI__data, #0
0x00B3	0x751700  	MOV FARG_writeSPI__data+1, #0
0x00B6	0x112E    	ACALL _writeSPI
;ADC.c,255 :: 		while(SPIF_bit != 1) {} //Ждем конца отправки
L_adc_get_data19:
0x00B8	0xE5AA    	MOV A, SPIF_bit
0x00BA	0x20E702  	JB ACC.B7, L_adc_get_data20
0x00BD	0x80F9    	SJMP L_adc_get_data19
L_adc_get_data20:
;ADC.c,256 :: 		_data.second = readSPI();
0x00BF	0x1132    	ACALL _readSPI
0x00C1	0x850014  	MOV adc_get_data__data_L0+1, 0
;ADC.c,259 :: 		writeSPI(0b00000000);
0x00C4	0x751600  	MOV FARG_writeSPI__data, #0
0x00C7	0x751700  	MOV FARG_writeSPI__data+1, #0
0x00CA	0x112E    	ACALL _writeSPI
;ADC.c,260 :: 		while(SPIF_bit != 1) {}
L_adc_get_data21:
0x00CC	0xE5AA    	MOV A, SPIF_bit
0x00CE	0x20E702  	JB ACC.B7, L_adc_get_data22
0x00D1	0x80F9    	SJMP L_adc_get_data21
L_adc_get_data22:
;ADC.c,261 :: 		_data.third = readSPI();
0x00D3	0x1132    	ACALL _readSPI
0x00D5	0x850015  	MOV adc_get_data__data_L0+2, 0
;ADC.c,264 :: 		CS = 1;
0x00D8	0xD2A0    	SETB P2_0_bit
;ADC.c,266 :: 		return _data;
0x00DA	0x7B03    	MOV R3, #3
0x00DC	0xA812    	MOV R0, _adc_get_data_su_addr
0x00DE	0x7913    	MOV R1, lo_addr(adc_get_data__data_L0)
L_adc_get_data23:
0x00E0	0xE7      	MOV A, @R1
0x00E1	0xF6      	MOV @R0, A
0x00E2	0x7A01    	MOV R2, #1
0x00E4	0xC3      	CLR C
0x00E5	0xEB      	MOV A, R3
0x00E6	0x9A      	SUBB A, R2
0x00E7	0xFB      	MOV R3, A
0x00E8	0xE4      	CLR A
0x00E9	0x9B      	SUBB A, R3
0x00EA	0xFC      	MOV R4, A
0x00EB	0x08      	INC R0
0x00EC	0x09      	INC R1
0x00ED	0xEB      	MOV A, R3
0x00EE	0x70F0    	JNZ L_adc_get_data23
0x00F0	0x8513A0  	MOV CS, adc_get_data__data_L0+0
0x00F3	0x8514A1  	MOV CS+1, adc_get_data__data_L0+1
;ADC.c,267 :: 		}
0x00F6	0x22      	RET
; end of _adc_get_data
_transmit:
;ADC.c,199 :: 		void transmit(char b) {
;ADC.c,200 :: 		SBUF = b;
0x00F7	0x850E99  	MOV SBUF, FARG_transmit_b+0
;ADC.c,201 :: 		while(TI_bit == 0) {}
L_transmit8:
0x00FA	0x209902  	JB TI_bit, L_transmit9
0x00FD	0x80FB    	SJMP L_transmit8
L_transmit9:
;ADC.c,202 :: 		TI_bit = 0;
0x00FF	0xC299    	CLR TI_bit
;ADC.c,204 :: 		}
0x0101	0x22      	RET
; end of _transmit
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x0102	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x0103	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x0104	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x0105	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x0106	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x0107	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x0109	0x22      	RET
; end of ___CC2D
_initSPI:
;ADC.c,174 :: 		void initSPI() {
;ADC.c,175 :: 		SPCR = 0b01010001;
0x010A	0x75D551  	MOV SPCR, #81
;ADC.c,177 :: 		}
0x010D	0x22      	RET
; end of _initSPI
_rs232init:
;ADC.c,184 :: 		void rs232init() {
;ADC.c,185 :: 		PCON = 0x80;
0x010E	0x758780  	MOV PCON, #128
;ADC.c,186 :: 		TMOD = 0x022;
0x0111	0x758922  	MOV TMOD, #34
;ADC.c,187 :: 		TCON = 0x40;
0x0114	0x758840  	MOV TCON, #64
;ADC.c,188 :: 		SCON = 0x50;
0x0117	0x759850  	MOV SCON, #80
;ADC.c,189 :: 		TH1 = 0x0F5;
0x011A	0x758DF5  	MOV TH1, #245
;ADC.c,190 :: 		P3 = 0x003;
0x011D	0x75B003  	MOV P3, #3
;ADC.c,191 :: 		TR1_bit=1;
0x0120	0xD28E    	SETB TR1_bit
;ADC.c,192 :: 		}
0x0122	0x22      	RET
; end of _rs232init
_main:
0x0123	0x758180  	MOV SP, #128
;ADC.c,269 :: 		void main() {
;ADC.c,271 :: 		initSPI();
0x0126	0x310A    	ACALL _initSPI
;ADC.c,272 :: 		rs232init();
0x0128	0x310E    	ACALL _rs232init
;ADC.c,274 :: 		CS = 1;
0x012A	0xD2A0    	SETB P2_0_bit
;ADC.c,275 :: 		Delay_us(1);
0x012C	0x00      	NOP
;ADC.c,277 :: 		while(1) {
L_main24:
;ADC.c,278 :: 		adc_data = adc_get_data(0);
0x012D	0x750E00  	MOV FARG_adc_get_data_channel, #0
0x0130	0x750F00  	MOV FARG_adc_get_data_channel+1, #0
0x0133	0x7B0B    	MOV R3, lo_addr(FLOC__main)
0x0135	0x113D    	ACALL _adc_get_data
0x0137	0x7B03    	MOV R3, #3
0x0139	0x7808    	MOV R0, lo_addr(_adc_data)
0x013B	0x790B    	MOV R1, lo_addr(FLOC__main)
L_main26:
0x013D	0xE7      	MOV A, @R1
0x013E	0xF6      	MOV @R0, A
0x013F	0x7A01    	MOV R2, #1
0x0141	0xC3      	CLR C
0x0142	0xEB      	MOV A, R3
0x0143	0x9A      	SUBB A, R2
0x0144	0xFB      	MOV R3, A
0x0145	0xE4      	CLR A
0x0146	0x9B      	SUBB A, R3
0x0147	0xFC      	MOV R4, A
0x0148	0x08      	INC R0
0x0149	0x09      	INC R1
0x014A	0xEB      	MOV A, R3
0x014B	0x70F0    	JNZ L_main26
0x014D	0x850B08  	MOV _adc_data, FLOC__main+0
0x0150	0x850C09  	MOV _adc_data+1, FLOC__main+1
;ADC.c,280 :: 		transmit(adc_data.first);
0x0153	0x85080E  	MOV FARG_transmit_b, _adc_data+0
0x0156	0x11F7    	ACALL _transmit
;ADC.c,281 :: 		transmit(adc_data.second);
0x0158	0x85090E  	MOV FARG_transmit_b, _adc_data+1
0x015B	0x11F7    	ACALL _transmit
;ADC.c,282 :: 		transmit(adc_data.third);
0x015D	0x850A0E  	MOV FARG_transmit_b, _adc_data+2
0x0160	0x11F7    	ACALL _transmit
;ADC.c,284 :: 		Delay_ms(2000);
0x0162	0x7D0D    	MOV R5, 13
0x0164	0x7EAB    	MOV R6, 171
0x0166	0x7F7C    	MOV R7, 124
0x0168	0xDFFE    	DJNZ R7, PC-2
0x016A	0xDEFC    	DJNZ R6, PC-4
0x016C	0xDDFA    	DJNZ R5, PC-6
;ADC.c,285 :: 		}
0x016E	0x80BD    	SJMP L_main24
;ADC.c,349 :: 		}
0x0170	0x80FE    	SJMP #254
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x002E       [4]    _writeSPI
0x0032      [11]    _readSPI
0x003D     [186]    _adc_get_data
0x00F7      [11]    _transmit
0x0102       [8]    ___CC2D
0x010A       [4]    _initSPI
0x010E      [21]    _rs232init
0x0123      [79]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [3]    _adc_data
0x000B       [3]    FLOC__main
0x000E       [1]    FARG_transmit_b
0x000E       [2]    FARG_adc_get_data_channel
0x0010       [2]    adc_get_data_SPI_init_data_L0
0x0012       [1]    _adc_get_data_su_addr
0x0013       [3]    adc_get_data__data_L0
0x0016       [2]    readSPI__data_L0
0x0016       [2]    FARG_writeSPI__data
0x0081       [1]    SP
0x0082       [1]    DPL
0x0083       [1]    DPH
0x0086       [1]    SPDR
0x0087       [1]    PCON
0x0088       [1]    TCON
0x0088       [0]    TR1_bit
0x0089       [1]    TMOD
0x008D       [1]    TH1
0x0098       [0]    TI_bit
0x0098       [1]    SCON
0x0099       [1]    SBUF
0x00A0       [0]    CS
0x00A0       [0]    P2_0_bit
0x00AA       [0]    SPIF_bit
0x00B0       [1]    P3
0x00D0       [1]    PSW
0x00D5       [1]    SPCR
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Label List: ** 
//----------------------------------------------
  L_readData0
  L_readData1
  L_drawPoint2
  L_drawPoint3
  L_drawPoint4
  L_drawPoint5
  L_drawPoint6
  L_drawPoint7
  L_transmit8
  L_transmit9
  L_adc_get_data10
  L_adc_get_data11
  L_adc_get_data12
  L_adc_get_data13
  L_adc_get_data14
  L_adc_get_data15
  L_adc_get_data16
  L_adc_get_data17
  L_adc_get_data18
  L_adc_get_data19
  L_adc_get_data20
  L_adc_get_data21
  L_adc_get_data22
  L_adc_get_data23
  L_main24
  L_main25
  L_main26
  _setXAddress
  _setYAddress
  _setZAddress
  _writeData
  _readData
  L__readData27
  L__readData28
  L__readData29
  L__readData30
  _displayOn
  _drawPoint
  L__drawPoint31
  L__drawPoint32
  L__drawPoint33
  L__drawPoint34
  L__drawPoint35
  L__drawPoint36
  L__drawPoint37
  L__drawPoint38
  _initSPI
  _rs232init
  _transmit
  _writeSPI
  _readSPI
  _delay
  _adc_get_data
  L__adc_get_data39
  L__adc_get_data40
  L__adc_get_data41
  _main
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
