;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 27.02.2018 15:52:01
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x020136  	LJMP 310
0x0003	0x020000  	LJMP 0
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020000  	LJMP 0
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
0x0026	0x00      	NOP
0x0027	0x00      	NOP
0x0028	0x00      	NOP
0x0029	0x00      	NOP
0x002A	0x00      	NOP
0x002B	0x020000  	LJMP 0
_readSPI:
;ADC.c,229 :: 		int readSPI() {
;ADC.c,231 :: 		_data = SPDR;
0x002E	0x858622  	MOV readSPI__data_L0, SPDR+0
0x0031	0xE4      	CLR A
0x0032	0xF523    	MOV readSPI__data_L0+1, A
;ADC.c,232 :: 		return _data;
0x0034	0xA822    	MOV R0, readSPI__data_L0
0x0036	0xA923    	MOV R1, readSPI__data_L0+1
;ADC.c,233 :: 		}
0x0038	0x22      	RET
; end of _readSPI
_writeSPI:
;ADC.c,222 :: 		void writeSPI(int _data) {
;ADC.c,223 :: 		SPDR = _data;
0x0039	0x852286  	MOV SPDR, FARG_writeSPI__data+0
;ADC.c,224 :: 		}
0x003C	0x22      	RET
; end of _writeSPI
_transmit:
;ADC.c,203 :: 		void transmit(char b) {
;ADC.c,204 :: 		SBUF = b;
0x003D	0x852299  	MOV SBUF, FARG_transmit_b+0
;ADC.c,205 :: 		while(TI_bit == 0) {}
L_transmit8:
0x0040	0x209902  	JB TI_bit, L_transmit9
0x0043	0x80FB    	SJMP L_transmit8
L_transmit9:
;ADC.c,206 :: 		TI_bit = 0;
0x0045	0xC299    	CLR TI_bit
;ADC.c,208 :: 		}
0x0047	0x22      	RET
; end of _transmit
_transmitString:
;ADC.c,210 :: 		void transmitString(char* str) {
;ADC.c,212 :: 		char *p = &str[0];
0x0048	0x851A1B  	MOV transmitString_p_L0, FARG_transmitString_str+0
;ADC.c,214 :: 		while (*p) {
L_transmitString10:
0x004B	0xA81B    	MOV R0, transmitString_p_L0
0x004D	0xE6      	MOV A, @R0
0x004E	0x600A    	JZ L_transmitString11
;ADC.c,215 :: 		transmit(*(p++));
0x0050	0xA81B    	MOV R0, transmitString_p_L0
0x0052	0x8622    	MOV FARG_transmit_b, @R0
0x0054	0x113D    	ACALL _transmit
0x0056	0x051B    	INC transmitString_p_L0
;ADC.c,216 :: 		}
0x0058	0x80F1    	SJMP L_transmitString10
L_transmitString11:
;ADC.c,217 :: 		}
0x005A	0x22      	RET
; end of _transmitString
_adc_get_data:
;ADC.c,246 :: 		struct rcv_data adc_get_data(int channel) {
0x005B	0x85031E  	MOV _adc_get_data_su_addr, 3
;ADC.c,248 :: 		int SPI_init_data = 0b11000000;
0x005E	0x751CC0  	MOV adc_get_data_SPI_init_data_L0, #192
0x0061	0x751D00  	MOV adc_get_data_SPI_init_data_L0+1, #0
;ADC.c,249 :: 		if(channel == 0) {
0x0064	0xE51A    	MOV A, FARG_adc_get_data_channel
0x0066	0x451B    	ORL A, FARG_adc_get_data_channel+1
0x0068	0x7002    	JNZ L_adc_get_data12
;ADC.c,250 :: 		SPI_init_data += 0b00000000;
;ADC.c,251 :: 		} else if(channel == 1) {
0x006A	0x804C    	SJMP L_adc_get_data13
L_adc_get_data12:
0x006C	0x7401    	MOV A, #1
0x006E	0x651A    	XRL A, FARG_adc_get_data_channel
0x0070	0x7004    	JNZ L__adc_get_data55
0x0072	0x7400    	MOV A, #0
0x0074	0x651B    	XRL A, FARG_adc_get_data_channel+1
L__adc_get_data55:
0x0076	0x700E    	JNZ L_adc_get_data14
;ADC.c,252 :: 		SPI_init_data += 0b00010000;
0x0078	0x7410    	MOV A, #16
0x007A	0x251C    	ADD A, adc_get_data_SPI_init_data_L0
0x007C	0xF51C    	MOV adc_get_data_SPI_init_data_L0, A
0x007E	0x7400    	MOV A, #0
0x0080	0x351D    	ADDC A, adc_get_data_SPI_init_data_L0+1
0x0082	0xF51D    	MOV adc_get_data_SPI_init_data_L0+1, A
;ADC.c,253 :: 		} else if(channel == 2) {
0x0084	0x8032    	SJMP L_adc_get_data15
L_adc_get_data14:
0x0086	0x7402    	MOV A, #2
0x0088	0x651A    	XRL A, FARG_adc_get_data_channel
0x008A	0x7004    	JNZ L__adc_get_data56
0x008C	0x7400    	MOV A, #0
0x008E	0x651B    	XRL A, FARG_adc_get_data_channel+1
L__adc_get_data56:
0x0090	0x700E    	JNZ L_adc_get_data16
;ADC.c,254 :: 		SPI_init_data += 0b00100000;
0x0092	0x7420    	MOV A, #32
0x0094	0x251C    	ADD A, adc_get_data_SPI_init_data_L0
0x0096	0xF51C    	MOV adc_get_data_SPI_init_data_L0, A
0x0098	0x7400    	MOV A, #0
0x009A	0x351D    	ADDC A, adc_get_data_SPI_init_data_L0+1
0x009C	0xF51D    	MOV adc_get_data_SPI_init_data_L0+1, A
;ADC.c,255 :: 		} else if(channel == 3) {
0x009E	0x8018    	SJMP L_adc_get_data17
L_adc_get_data16:
0x00A0	0x7403    	MOV A, #3
0x00A2	0x651A    	XRL A, FARG_adc_get_data_channel
0x00A4	0x7004    	JNZ L__adc_get_data57
0x00A6	0x7400    	MOV A, #0
0x00A8	0x651B    	XRL A, FARG_adc_get_data_channel+1
L__adc_get_data57:
0x00AA	0x700C    	JNZ L_adc_get_data18
;ADC.c,256 :: 		SPI_init_data += 0b00110000;
0x00AC	0x7430    	MOV A, #48
0x00AE	0x251C    	ADD A, adc_get_data_SPI_init_data_L0
0x00B0	0xF51C    	MOV adc_get_data_SPI_init_data_L0, A
0x00B2	0x7400    	MOV A, #0
0x00B4	0x351D    	ADDC A, adc_get_data_SPI_init_data_L0+1
0x00B6	0xF51D    	MOV adc_get_data_SPI_init_data_L0+1, A
;ADC.c,257 :: 		}
L_adc_get_data18:
L_adc_get_data17:
L_adc_get_data15:
L_adc_get_data13:
;ADC.c,258 :: 		CS = 0; //Включение АЦП
0x00B8	0xC2A0    	CLR P2_0_bit
;ADC.c,263 :: 		writeSPI(SPI_init_data);       //Отправка данных для установки режима АЦП
0x00BA	0x851C22  	MOV FARG_writeSPI__data, adc_get_data_SPI_init_data_L0+0
0x00BD	0x851D23  	MOV FARG_writeSPI__data+1, adc_get_data_SPI_init_data_L0+1
0x00C0	0x1139    	ACALL _writeSPI
;ADC.c,264 :: 		while(SPIF_bit != 1) {}     //Ждем конца отправки
L_adc_get_data19:
0x00C2	0xE5AA    	MOV A, SPIF_bit
0x00C4	0x20E702  	JB ACC.B7, L_adc_get_data20
0x00C7	0x80F9    	SJMP L_adc_get_data19
L_adc_get_data20:
;ADC.c,265 :: 		_data.first = readSPI(); //Читаем результат
0x00C9	0x112E    	ACALL _readSPI
0x00CB	0x85001F  	MOV adc_get_data__data_L0, 0
;ADC.c,268 :: 		writeSPI(0b00000000); //Отправка данных
0x00CE	0x752200  	MOV FARG_writeSPI__data, #0
0x00D1	0x752300  	MOV FARG_writeSPI__data+1, #0
0x00D4	0x1139    	ACALL _writeSPI
;ADC.c,269 :: 		while(SPIF_bit != 1) {} //Ждем конца отправки
L_adc_get_data21:
0x00D6	0xE5AA    	MOV A, SPIF_bit
0x00D8	0x20E702  	JB ACC.B7, L_adc_get_data22
0x00DB	0x80F9    	SJMP L_adc_get_data21
L_adc_get_data22:
;ADC.c,270 :: 		_data.second = readSPI();
0x00DD	0x112E    	ACALL _readSPI
0x00DF	0x850020  	MOV adc_get_data__data_L0+1, 0
;ADC.c,273 :: 		writeSPI(0b00000000);
0x00E2	0x752200  	MOV FARG_writeSPI__data, #0
0x00E5	0x752300  	MOV FARG_writeSPI__data+1, #0
0x00E8	0x1139    	ACALL _writeSPI
;ADC.c,274 :: 		while(SPIF_bit != 1) {}
L_adc_get_data23:
0x00EA	0xE5AA    	MOV A, SPIF_bit
0x00EC	0x20E702  	JB ACC.B7, L_adc_get_data24
0x00EF	0x80F9    	SJMP L_adc_get_data23
L_adc_get_data24:
;ADC.c,275 :: 		_data.third = readSPI();
0x00F1	0x112E    	ACALL _readSPI
0x00F3	0x850021  	MOV adc_get_data__data_L0+2, 0
;ADC.c,278 :: 		CS = 1;
0x00F6	0xD2A0    	SETB P2_0_bit
;ADC.c,280 :: 		return _data;
0x00F8	0x7B03    	MOV R3, #3
0x00FA	0xA81E    	MOV R0, _adc_get_data_su_addr
0x00FC	0x791F    	MOV R1, lo_addr(adc_get_data__data_L0)
L_adc_get_data25:
0x00FE	0xE7      	MOV A, @R1
0x00FF	0xF6      	MOV @R0, A
0x0100	0x7A01    	MOV R2, #1
0x0102	0xC3      	CLR C
0x0103	0xEB      	MOV A, R3
0x0104	0x9A      	SUBB A, R2
0x0105	0xFB      	MOV R3, A
0x0106	0xE4      	CLR A
0x0107	0x9B      	SUBB A, R3
0x0108	0xFC      	MOV R4, A
0x0109	0x08      	INC R0
0x010A	0x09      	INC R1
0x010B	0xEB      	MOV A, R3
0x010C	0x70F0    	JNZ L_adc_get_data25
0x010E	0x851FA0  	MOV CS, adc_get_data__data_L0+0
0x0111	0x8520A1  	MOV CS+1, adc_get_data__data_L0+1
;ADC.c,281 :: 		}
0x0114	0x22      	RET
; end of _adc_get_data
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x0115	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x0116	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x0117	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x0118	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x0119	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x011A	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x011C	0x22      	RET
; end of ___CC2D
_initSPI:
;ADC.c,178 :: 		void initSPI() {
;ADC.c,179 :: 		SPCR = 0b01010001;
0x011D	0x75D551  	MOV SPCR, #81
;ADC.c,181 :: 		}
0x0120	0x22      	RET
; end of _initSPI
_rs232init:
;ADC.c,188 :: 		void rs232init() {
;ADC.c,189 :: 		PCON = 0x80;
0x0121	0x758780  	MOV PCON, #128
;ADC.c,190 :: 		TMOD = 0x022;
0x0124	0x758922  	MOV TMOD, #34
;ADC.c,191 :: 		TCON = 0x40;
0x0127	0x758840  	MOV TCON, #64
;ADC.c,192 :: 		SCON = 0x50;
0x012A	0x759850  	MOV SCON, #80
;ADC.c,193 :: 		TH1 = 0x0F5;
0x012D	0x758DF5  	MOV TH1, #245
;ADC.c,194 :: 		P3 = 0x003;
0x0130	0x75B003  	MOV P3, #3
;ADC.c,195 :: 		TR1_bit=1;
0x0133	0xD28E    	SETB TR1_bit
;ADC.c,196 :: 		}
0x0135	0x22      	RET
; end of _rs232init
_main:
0x0136	0x758180  	MOV SP, #128
;ADC.c,347 :: 		void main() {
;ADC.c,348 :: 		char ch0[] = "channel 1\n\0";
0x0139	0x758296  	MOV DP0L, lo_addr(?ICSmain_ch0_L0)
0x013C	0x758301  	MOV DP0H, hi_addr(?ICSmain_ch0_L0)
0x013F	0x780B    	MOV R0, lo_addr(main_ch0_L0)
0x0141	0x790C    	MOV R1, #12
0x0143	0x3115    	ACALL ___CC2D
;ADC.c,349 :: 		char ch1[] = "channel 2\n\0";
;ADC.c,351 :: 		initSPI();
0x0145	0x311D    	ACALL _initSPI
;ADC.c,352 :: 		rs232init();
0x0147	0x3121    	ACALL _rs232init
;ADC.c,354 :: 		CS = 1;
0x0149	0xD2A0    	SETB P2_0_bit
;ADC.c,355 :: 		Delay_us(1);
0x014B	0x00      	NOP
;ADC.c,357 :: 		while(1) {
L_main40:
;ADC.c,358 :: 		adc_data = adc_get_data(0);
0x014C	0x751A00  	MOV FARG_adc_get_data_channel, #0
0x014F	0x751B00  	MOV FARG_adc_get_data_channel+1, #0
0x0152	0x7B17    	MOV R3, lo_addr(FLOC__main)
0x0154	0x115B    	ACALL _adc_get_data
0x0156	0x7B03    	MOV R3, #3
0x0158	0x7808    	MOV R0, lo_addr(_adc_data)
0x015A	0x7917    	MOV R1, lo_addr(FLOC__main)
L_main42:
0x015C	0xE7      	MOV A, @R1
0x015D	0xF6      	MOV @R0, A
0x015E	0x7A01    	MOV R2, #1
0x0160	0xC3      	CLR C
0x0161	0xEB      	MOV A, R3
0x0162	0x9A      	SUBB A, R2
0x0163	0xFB      	MOV R3, A
0x0164	0xE4      	CLR A
0x0165	0x9B      	SUBB A, R3
0x0166	0xFC      	MOV R4, A
0x0167	0x08      	INC R0
0x0168	0x09      	INC R1
0x0169	0xEB      	MOV A, R3
0x016A	0x70F0    	JNZ L_main42
0x016C	0x851708  	MOV _adc_data, FLOC__main+0
0x016F	0x851809  	MOV _adc_data+1, FLOC__main+1
;ADC.c,359 :: 		transmitString(ch0);
0x0172	0x751A0B  	MOV FARG_transmitString_str, lo_addr(main_ch0_L0)
0x0175	0x1148    	ACALL _transmitString
;ADC.c,361 :: 		transmit(adc_data.first);
0x0177	0x850822  	MOV FARG_transmit_b, _adc_data+0
0x017A	0x113D    	ACALL _transmit
;ADC.c,362 :: 		transmit(adc_data.second);
0x017C	0x850922  	MOV FARG_transmit_b, _adc_data+1
0x017F	0x113D    	ACALL _transmit
;ADC.c,363 :: 		transmit(adc_data.third);
0x0181	0x850A22  	MOV FARG_transmit_b, _adc_data+2
0x0184	0x113D    	ACALL _transmit
;ADC.c,365 :: 		Delay_ms(5000);
0x0186	0x7D20    	MOV R5, 32
0x0188	0x7EAB    	MOV R6, 171
0x018A	0x7F39    	MOV R7, 57
0x018C	0xDFFE    	DJNZ R7, PC-2
0x018E	0xDEFC    	DJNZ R6, PC-4
0x0190	0xDDFA    	DJNZ R5, PC-6
;ADC.c,374 :: 		}
0x0192	0x80B8    	SJMP L_main40
;ADC.c,375 :: 		}
0x0194	0x80FE    	SJMP #254
; end of _main
;ADC.c,0 :: ?ICSmain_ch0_L0
0x0196	0x636861 ;?ICSmain_ch0_L0+0
0x0199	0x6E6E65 ;?ICSmain_ch0_L0+3
0x019C	0x6C2031 ;?ICSmain_ch0_L0+6
0x019F	0x0A0000 ;?ICSmain_ch0_L0+9
; end of ?ICSmain_ch0_L0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x002E      [11]    _readSPI
0x0039       [4]    _writeSPI
0x003D      [11]    _transmit
0x0048      [19]    _transmitString
0x005B     [186]    _adc_get_data
0x0115       [8]    ___CC2D
0x011D       [4]    _initSPI
0x0121      [21]    _rs232init
0x0136      [96]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [3]    _adc_data
0x000B      [12]    main_ch0_L0
0x0017       [3]    FLOC__main
0x001A       [2]    FARG_adc_get_data_channel
0x001A       [1]    FARG_transmitString_str
0x001B       [1]    transmitString_p_L0
0x001C       [2]    adc_get_data_SPI_init_data_L0
0x001E       [1]    _adc_get_data_su_addr
0x001F       [3]    adc_get_data__data_L0
0x0022       [2]    FARG_writeSPI__data
0x0022       [2]    readSPI__data_L0
0x0022       [1]    FARG_transmit_b
0x0081       [1]    SP
0x0082       [1]    DPL
0x0083       [1]    DPH
0x0086       [1]    SPDR
0x0087       [1]    PCON
0x0088       [0]    TR1_bit
0x0088       [1]    TCON
0x0089       [1]    TMOD
0x008D       [1]    TH1
0x0098       [0]    TI_bit
0x0098       [1]    SCON
0x0099       [1]    SBUF
0x00A0       [0]    P2_0_bit
0x00A0       [0]    CS
0x00AA       [0]    SPIF_bit
0x00B0       [1]    P3
0x00D0       [1]    PSW
0x00D5       [1]    SPCR
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0196      [12]    ?ICSmain_ch0_L0
//** Label List: ** 
//----------------------------------------------
  L_readData0
  L_readData1
  L_drawPoint2
  L_drawPoint3
  L_drawPoint4
  L_drawPoint5
  L_drawPoint6
  L_drawPoint7
  L_transmit8
  L_transmit9
  L_transmitString10
  L_transmitString11
  L_adc_get_data12
  L_adc_get_data13
  L_adc_get_data14
  L_adc_get_data15
  L_adc_get_data16
  L_adc_get_data17
  L_adc_get_data18
  L_adc_get_data19
  L_adc_get_data20
  L_adc_get_data21
  L_adc_get_data22
  L_adc_get_data23
  L_adc_get_data24
  L_adc_get_data25
  L_parseADCValue26
  L_parseADCValue27
  L_parseADCValue28
  L_parseADCValue29
  L_parseADCValue30
  L_parseADCValue31
  L_reverse32
  L_reverse33
  L_reverse34
  L_itoa35
  L_itoa36
  L_itoa37
  L_itoa38
  L_itoa39
  L_main40
  L_main41
  L_main42
  _setXAddress
  _setYAddress
  _setZAddress
  _writeData
  _readData
  L__readData43
  L__readData44
  L__readData45
  L__readData46
  _displayOn
  _drawPoint
  L__drawPoint47
  L__drawPoint48
  L__drawPoint49
  L__drawPoint50
  L__drawPoint51
  L__drawPoint52
  L__drawPoint53
  L__drawPoint54
  _initSPI
  _rs232init
  _transmit
  _transmitString
  _writeSPI
  _readSPI
  _delay
  _adc_get_data
  L__adc_get_data55
  L__adc_get_data56
  L__adc_get_data57
  _getBit
  L__getBit58
  L__getBit59
  _parseADCValue
  L__parseADCValue60
  L__parseADCValue61
  L__parseADCValue62
  L__parseADCValue63
  _reverse
  _itoa
  _main
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
